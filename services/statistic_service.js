const Todo = require('../model/todo.model');
const Statistics = require('../model/statictis_schema');

const calculateStatistics = async (userId) => { 
    try {
        // kullanÄ±cnÄ±n tÃ¼m gÃ¶revlerini mongodb den Ã§ekiyoruz  ve kategoiryle birlikte getiriyoruz
        const tasks = await Todo.find({ userId }).populate('category');
        console.log("bulunan gÃ¶rev sayÄ±sÄ± ${tasks.length}");
        // istatistikleri hesapla 
        const completedTasks = tasks.filter(task => task.isCompleted).length;// tamamlanan gÃ¶rev sayÄ±sÄ±nÄ± bulduk
        // => arrow function kullandÄ±k   bunu yazarsak returne gerek yok 
        // filter metodu hep trule dÃ¶ndÃ¼rÃ¼yor 
        const totalTasks = tasks.length;
        // bugÃ¼nÃ¼n tarihini belirle  
        const today = new Date();//bugÃ¼nÃ¼n tarihini alÄ±yoruz
        today.setHours(0, 0, 0, 0);// saati sÄ±fÄ±rlÄ±yoruz
        // bekleyen gÃ¶revleri filtereliyoruz 
        const pendingTasks = tasks.filter(task => !task.isCompleted && new Date(task.dueDate) >= today).length;

        // tamamlanma oranÄ± yÃ¼zde olarak
        const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
        // kategori bazlÄ± istatistikleri hesaplamak iÃ§in iki ayrÄ± map oluÅŸturuoyrz 
        const categoryCompletion = new Map();// anahtar deger Ã§iftlerini tutuyor 
        const categoryDistribution = new Map();// her kategorirede kaÃ§ gÃ¶rev var 
        // her gÃ¶revi dolaÅŸarak kategorilere gÃ¶re tamamnlanma oranlarÄ±nÄ± ve daÄŸÄ±lÄ±mlarÄ±nÄ± hesaplÄ±yoruz .
        tasks.forEach(task => {
            const categoryId = task.category ? task.category._id.toString() : 'none';
            
            categoryDistribution.set(categoryId, (categoryDistribution.get(categoryId) || 0) + 1);
            if (task.isCompleted) {
                
                categoryCompletion.set(categoryId, (categoryCompletion.get(categoryId) || 0) + 1);
            }
        });
        // kategori bazlÄ± tamamlanma oranlarÄ±nÄ± hesapla
        for (const [key, value] of categoryCompletion.entries()) {
            const completed = categoryCompletion.get(key) || 0;
            categoryCompletion.set(key,value >0 ? (completed/value)*100 : 0);
        }
        // haftalÄ±k ilerlemeyi hesapla  
        const weeklyProgress = calculateWeeklyProgress(tasks);
        // kulalnÄ±cn kaÃ§ gÃ¼n Ã¼st Ã¼ste gÃ¶rev tamamladÄ±gÄ±nÄ± hesapla 
        const currentStreak = calculateStreak(tasks);
            
        // hesaplanan istatistikleri MongoDbden gÃ¼ncelle veya yeni bir kayÄ±t oluÅŸturuyoz 
        const statistics = await Statistics.findOneAndUpdate(
            { userId },
            {
                completedTasks,
                totalTasks,
                categoryCompletion: Object.fromEntries(categoryCompletion),
                weeklyProgress,
                currentStreak,
                pendingTasks,
                completionRate,
                categoryDistribution: Object.fromEntries(categoryDistribution),
                updatedAt: new Date(),
            }, {
            new: true,// gÃ¼ncellenen belgenin yeni halni dÃ¶ndÃ¼rmesini saÄŸlÄ±yor 
            upsert: true,// eÄŸer belge bulunamazsa yeni bir belge oluÅŸturmasÄ±nÄ± saÄŸlÄ±yor
        }
        );
        console.log(" Ä°statistikler baÅŸarÄ±yla gÃ¼ncellendi:", statistics);
        return statistics;

        
    } catch (error) {
        console.error(" Ä°statistik hesaplama hatasÄ±:", error.message);
        throw new Error("istatistikelr hesaplanÄ±rken bir hata oluÅŸtu ");
        
    }

};

// haftalÄ±k ilerlemeyi hesapla
const calculateWeeklyProgress = (tasks) => {
    const progress = new Array(7).fill(0);
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay() + 1);
    console.log("ğŸ“… HaftalÄ±k ilerleme hesaplanÄ±yor...");

    for (let i = 0; i < 7; i++) {
        const day = new Date(startOfWeek);
        day.setDate(startOfWeek.getDate() + i);
        console.log(`ğŸ“† GÃ¼n: ${day.toISOString().split("T")[0]}`);

        // o gÃ¼ne ait gÃ¶revleri filterel  
        const dayTasks = tasks.filter(task => {
            const taskDate = new Date(task.dueDate);
            console.log(` GÃ¶rev Tarihi: ${taskDate.toISOString().split("T")[0]}`);

            return taskDate.getFullYear() === day.getFullYear() &&
                taskDate.getMonth() === day.getMonth() &&
                taskDate.getDate() === day.getDate();
        });
        // o gÃ¼ne ait tamamlanmÄ±ÅŸ gÃ¶revleri bul
        if (dayTasks.length > 0) {
            const completed = dayTasks.filter(task => task.isCompleted).length;
            progress[i] = completed / dayTasks.length;
        }
        console.log(`GÃ¼nlÃ¼k ilerleme [${i}] = ${progress[i]}`);

    }
    console.log(" HaftalÄ±k ilerleme tamamlandÄ±:", progress);

    return progress;
};

// Ã¼st Ã¼ste tamamlanan gÃ¶rev sayÄ±sÄ±nÄ± hesapla
const calculateStreak = (tasks) => {
    let streak = 0;
    const now = new Date();
    let currentDate = now;
    while (true) {
        const dayTasks = tasks.filter(task => {
            const taskDate = task.dueDate;
            return taskDate.getFullYear() === currentDate.getFullYear() &&
                taskDate.getMonth() === currentDate.getMonth() &&
                taskDate.getDate() === currentDate.getDate();
        });
        if (dayTasks.length == 0 || !dayTasks.every(task => task.isCompleted)) {
            
            break;
        }
        //streak sayÄ±sÄ±nÄ± artÄ±kr ve bir gÃ¼n geriye git
        streak++;
        currentDate.setDate(currentDate.getDate() - 1);
    }
    return streak;
};
 
const getStatistics = async (userId) => {
    try {
        return await calculateStatistics(userId);
    } catch (error) {
        throw new Error("Ä°statistikler getirilirken bir hata oluÅŸtu: " + error.message);

    }
        
};
//  Bu modÃ¼lde oluÅŸturduÄŸumuz fonksiyonlarÄ± dÄ±ÅŸa aktarÄ±yoruz.
module.exports = {
    calculateStatistics,
    getStatistics
};