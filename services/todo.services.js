const Todo = require('../model/todo.model');
const Category = require('../model/category_model');
// üìå Yeni g√∂rev ekleme
const createTodo = async (userId, todoData) => {
    try {
        const { title, category, dueDate, time, notes } = todoData;

        // üìå 1. Kategori ID'si ger√ßekten var mƒ± kontrol et
        const categoryExists = await Category.findById(category);
        if (!categoryExists) {
            throw new Error("Belirtilen kategori bulunamadƒ±!");
        }

        // üìå 2. Yeni g√∂rev olu≈ütur
        const newTodo = new Todo({
            userId,
            title,
            category, // ‚úÖ Kategori ID'sini ekledik!
            dueDate,
            time,
            notes,
            isCompleted: false, // Varsayƒ±lan olarak tamamlanmamƒ±≈ü olacak
        });

        // üìå 3. Kaydettikten sonra, kategori bilgisiyle birlikte d√∂nd√ºr
        return await newTodo.save().then(todo => todo.populate("category"));
    } catch (error) {
        throw new Error(error.message);
    }
};
const getTodos = async (userId) => {
    try {
        return await Todo.find({ userId }).populate("category"); // Sadece userId'ye g√∂re g√∂revleri getir
    } catch (error) {
        throw new Error("G√∂revler alƒ±nƒ±rken hata olu≈ütu!");
    }
};
const getTodosByDate = async (userId, selectedDate) => {
    try {
        const startOfDay = new Date(selectedDate);
        startOfDay.setHours(0, 0, 0, 0);
        const endOfDay = new Date(selectedDate);
        endOfDay.setHours(23, 59, 59, 999);
        return await Todo.find({
            userId,
            dueDate: {
                $gte: startOfDay,
                $lt: endOfDay
            }
        });
    } catch (error) {
        throw new Error("Se√ßili tarihe g√∂re g√∂revler alƒ±nƒ±rken hata olu≈ütu!");
        
    }
};

const updateTodo = async (userId, todoId, updateData) => {
    console.log("üîç G√ºncellenmek istenen g√∂rev ID:", todoId);
    console.log("üë§ G√ºncellenmek istenen kullanƒ±cƒ± ID:", userId);

    // üìå 1. Veritabanƒ±nda ger√ßekten o g√∂rev var mƒ± kontrol et (userId de e≈üle≈ümeli)
    const todo = await Todo.findOne({ _id: todoId, userId });

    if (!todo) {
        console.log("‚ùå G√∂rev bulunamadƒ± veya kullanƒ±cƒ± yetkisi yok!");
        throw new Error("G√∂rev bulunamadƒ± veya yetkiniz yok!");
    }

    console.log("‚úÖ G√∂rev bulundu, g√ºncelleniyor...");

    // üìå 2. G√∂revi g√ºncelle ve kategori bilgisini getir
    return await Todo.findOneAndUpdate(
        { _id: todoId, userId },  // üî• Kullanƒ±cƒ±ya ait olup olmadƒ±ƒüƒ±nƒ± da kontrol ediyoruz
        updateData,
        { new: true }
    ).populate("category"); // ‚úÖ Kategoriyi de getiriyoruz
};


// üìå G√∂rev Silme
const deleteTodo = async (userId, todoId) => {
    try {
        return await Todo.findOneAndDelete({ _id: todoId, userId });
    } catch (error) {
        throw new Error("G√∂rev silinirken hata olu≈ütu!");
    }
};

module.exports = {
    createTodo,
    getTodos,
    updateTodo,
    deleteTodo,
    getTodosByDate,
};